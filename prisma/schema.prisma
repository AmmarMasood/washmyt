// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Role {
  WASHER
  ADMIN
}
model UserProfile {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @unique
  name String?
  businessName String?
  phoneNumber String?
  email String
  website String?
  tShirtSize String? @default("M")
  businessAddress String?
  serviceRadius Int?
  ownACar Boolean?
  mobileWaterCapability Boolean?
  mobileElectricCapability Boolean?
  services String[]
  ownBusinessLicense Boolean?
  businessLicenseImage String?
  ownInsurance Boolean?
  insuranceImage String?
  documentsVerified Boolean?
  onboardingCompleted Boolean? @default(false)
  profileImage String?
  role Role @default(WASHER)
  acceptingWashes Boolean @default(true)
  createdAt DateTime @default(now())
  primarySoapBrand String?
  washRequests WashRequest[]
  resheduleRequests RescheduleRequest[]
  stripeAccountId String? 
  chargesEnabled Boolean @default(false)
  transfersEnabled Boolean  @default(false)
  stripeDetailsSubmitted Boolean @default(false)
}


model Package{
    id String @id @default(auto()) @map("_id") @db.ObjectId
    name String @unique
    description String 
    price Float 
    washRequests WashRequest[]
}

model Coupon{
    id String @id @default(auto()) @map("_id") @db.ObjectId
    name String @unique
    description String 
    discountPercentage Float 
    isValid Boolean @default(true)
    washRequests WashRequest[]
    createdAt DateTime @default(now())
}
model Customer{
    id String @id @default(auto()) @map("_id") @db.ObjectId
    name String
    email String @unique
    phoneNumber String
    createdAt DateTime @default(now())
    washRequests WashRequest[]
    stripeId String
}


model RescheduleRequest{
    id String @id @default(auto()) @map("_id") @db.ObjectId
    washRequestId String @db.ObjectId
    washRequest WashRequest @relation(fields: [washRequestId], references: [id])
    generatedBy String 
    generatedByUser UserProfile @relation(fields: [generatedBy], references: [userId])
    rescheduleDateAndTimeUTC DateTime
    status RescheduleRequestStatus @default(PENDING)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt @default(now())
}

enum WashStatus {
    ACCEPTED
    COMPLETED
    STARTED
    CANCELLED
    CREATED
}

enum PaymentStatus {
    PAID
    UNPAID
}

enum RescheduleRequestStatus {
    ACCEPTED
    PENDING
    NOTIFIED
    REJECTED
    DISCARDED
}

model WashRequest{
      id String @id @default(auto()) @map("_id") @db.ObjectId
      packageId String @db.ObjectId
      package Package @relation(fields: [packageId], references: [id])
      color String
      selectedModel String
      washDateAndTimeUTC DateTime
      washCompletedTime DateTime?
      washStartedTime DateTime?
      paymentStatus PaymentStatus @default(UNPAID)
      snowPackage Boolean @default(false)
      chargedAmount Float?
      stripeId String?
      rating Int?
      tipAmount Float?
      tipPaid Boolean @default(false)
      tipStripeId String?
      electricalHookupAvailable Boolean
      waterHookupAvailable Boolean
      address String
      washStatus WashStatus @default(CREATED)
      beforePhoto String?
      afterPhoto String?
      createdAt DateTime @default(now())
      updatedAt DateTime @updatedAt @default(now())
      couponId String? @db.ObjectId
      coupon Coupon? @relation(fields: [couponId], references: [id])
      customerId String @db.ObjectId
      customer Customer @relation(fields: [customerId], references: [id])
      washerId String?
      washer UserProfile? @relation(fields: [washerId], references: [userId])
      resheduleRequests RescheduleRequest[]
      ledger WashRequestLedger?
}


model WashRequestLedger{
      id String @id @default(auto()) @map("_id") @db.ObjectId
      washRequestId String @db.ObjectId @unique
      washRequest WashRequest @relation(fields: [washRequestId], references: [id])
      chargedAmount Float
      stripeCharges Float
      washerCharges Float?
      receivedAmount Float
      tipAmount Float?
      tipStripeCharges Float?
      tipWasherCharges Float?
      tipReceivedAmount Float?
}
